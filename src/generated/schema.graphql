### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Address {
  city: String
  country: String
  line1: String
  line2: String
  postal_code: String
  state: String
}

type Amount {
  formatted: String!
  raw: Int!
  raw_formatted: Float!
}

interface AmountInterface {
  amount: Amount!
}

type Balance {
  available: [BalanceFund!]!
  pending: [BalanceFund!]!
}

type BalanceFund implements AmountInterface & CurrencyInterface {
  amount: Amount!
  currency: Currency!
  source_types: BalanceFundSourceTypes!
}

type BalanceFundSourceTypes {
  bank_account: Int
  card: Int
  fpx: Int
}

type BalanceTransaction implements AmountInterface & CurrencyInterface & NodeInterface {
  amount: Amount!
  currency: Currency!
  id: ID!
  object: String!
}

type BankAccount implements CurrencyInterface & MetadataInterface & NodeInterface {
  account_holder_name: String
  account_holder_type: LEGAL_ENTITY_TYPE
  bank_name: String
  country: String
  currency: Currency!
  customer: String
  fingerprint: String
  id: ID!
  last4: String
  metadata: [Metadata!]!
  object: String!
  routing_number: String
  status: String
}

type Card implements MetadataInterface & NodeInterface {
  brand: String
  country: String
  default_for_currency: Boolean
  exp_month: Int
  exp_year: Int
  funding: CARD_FUNDING_TYPE!
  id: ID!
  last4: String
  metadata: [Metadata!]!
  name: String
  object: String!
}

enum CARD_FUNDING_TYPE {
  credit
  debit
  prepaid
  unknown
}

type Charge implements AmountInterface & CurrencyInterface & MetadataInterface & NodeInterface {
  amount: Amount!
  created: Int!
  currency: Currency!
  customer: Customer!
  description: String
  failure_code: String
  failure_message: String
  id: ID!
  metadata: [Metadata!]!
  object: String!
  payment_intent: String!
  receipt_number: String
  receipt_url: String
  status: String!
}

type Currency {
  code: String!
  symbol: String!
}

interface CurrencyInterface {
  currency: Currency!
}

scalar CurrencyScalar

type Customer implements MetadataInterface & NodeInterface {
  """The customer’s address."""
  address: Address
  bankAccounts: [BankAccount!]!
  cards: [Card!]!

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: Int!

  """
  Three-letter ISO code for the currency the customer can be charged in for recurring billing purposes.
  """
  currency: String

  """
  When the customer’s latest invoice is billed by charging automatically, delinquent is true if the invoice’s latest charge is failed. When the customer’s latest invoice is billed by sending an invoice, delinquent is true if the invoice is not paid by its due date.
  """
  delinquent: Boolean!

  """
  An arbitrary string attached to the object. Often useful for displaying to users.
  """
  description: String

  """The customer's email address."""
  email: String
  id: ID!
  metadata: [Metadata!]!
  object: String!
}

scalar DateTimeScalar

type Good implements NodeInterface & ProductInterface {
  active: Boolean!
  attributes: [String!]!
  caption: String
  created: Int!
  deactivate_on: [String!]!
  description: String
  id: ID!
  images: [String!]!
  livemode: Boolean!
  name: String!
  object: String!
  package_dimensions: PackageDimensions
  shippable: Boolean!
  type: String!
  updated: Int!
  url: String!
}

enum LEGAL_ENTITY_TYPE {
  company
  individual
}

type Metadata {
  key: String!
  value: String!
}

interface MetadataInterface {
  metadata: [Metadata!]!
}

interface NodeInterface {
  id: ID!
  object: String!
}

type PackageDimensions {
  height: Float!
  length: Float!
  weight: Float!
  width: Float!
}

input PaginationInput {
  ending_before: String
  limit: Int! = 0
  starting_after: String
}

type Plan implements AmountInterface & CurrencyInterface & MetadataInterface & NodeInterface {
  active: Boolean!
  aggregate_usage: String
  amount: Amount!
  amount_decimal: String
  billing_scheme: String!
  created: Int!
  currency: Currency!
  id: ID!
  interval: String!
  interval_count: Int!
  livemode: Boolean!
  metadata: [Metadata!]!
  nickname: String
  object: String!
  tiers: [Tier!]
  tiers_mode: String
  transform_usage: TransformUsage
  trial_period_days: Int
  usage_type: String!
}

interface ProductInterface {
  active: Boolean!
  created: Int!
  description: String
  livemode: Boolean!
  name: String!
  type: String!
  updated: Int!
}

type Query {
  balance: Balance!
  balanceTransaction(id: String!): BalanceTransaction!
  balanceTransactions: [BalanceTransaction!]!
  charge(id: String!): Charge!
  charges: [Charge!]!
  customer(id: String!): Customer!
  customers: [Customer!]!
  plans: [Plan!]!
  product(id: ID!): ProductInterface
  products: [ProductInterface!]!
  subscription(id: ID!): Subscription
  subscriptions(customer: ID): [Subscription!]!
}

type Service implements NodeInterface & ProductInterface {
  active: Boolean!
  created: Int!
  description: String
  id: ID!
  livemode: Boolean!
  name: String!
  object: String!
  plans: [Plan!]!
  statement_descriptor: String
  type: String!
  unit_label: String
  updated: Int!
}

type Subscription implements MetadataInterface & NodeInterface & SubscriptionItemInterface {
  billing_cycle_anchor: Int!
  cancel_at: Int
  canceled_at: Int
  collection_method: String!
  created: Int!
  current_period_end: Int!
  current_period_start: Int!
  customer: Customer!
  id: ID!
  items: [SubscriptionItem!]!
  latest_invoice: Int
  metadata: [Metadata!]!
  object: String!
  status: String!
}

type SubscriptionItem {
  key: String!
  value: String!
}

interface SubscriptionItemInterface {
  items: [SubscriptionItem!]!
}

type Tier {
  """Price for the entire tier."""
  flat_amount: Int!

  """
  Same as flat_amount, but contains a decimal value with at most 12 decimal places.
  """
  flat_amount_decimal: String!

  """Per unit price for units relevant to the tier."""
  unit_amount: Int!

  """
  Same as unit_amount, but contains a decimal value with at most 12 decimal places.
  """
  unit_amount_decimal: String!
  up_to: Int!
}

type TransformUsage {
  divide_by: Int!
  round: String!
}
